%  PT Parser Version 5.1
%
% Date:  30 Jun 1980
%        (Revised v5.1 - 8 Feb 2021)
%
% Author:  Alan Rosselet
%
% Abstract
%     This module parses the syntax token stream emitted by the scanner
%     and emits a postfix stream of tokens to the semantic analyzer
%     module.  The parser detects and repairs syntax errors so that the
%     token stream emitted to the semantic analyzer is syntactically
%     legal (except for the special case of declaration phase errors - 
%     see the comment in the Block routine below).

Input :
        % Keywords must be first both here and in stdIdentifiers,
        % and they must appear in the exact same order

        pDiv                    'div'
        firstKeywordToken = pDiv
        pMod                    'mod'
        pOr                     'or'
        pAnd                    'and'
        pThen                   'then'
        pElse                   'else'
        pOf                     'of'
        pEnd                    'end'
        pDo                     'do'
        pArray                  'array'
        pFile                   'file'
        pVar                    'var'
        pType                   'type'
        pIf                     'if'
        pCase                   'case'
        pWhile                  'while'
        pUsing                  'using'
        pVal                    'val'
        pDef                    'def'
        pBreak                  'break'
        pWhen                   'when'
        pModule                 'module'
        pUnless                 'unless'
        % remove these old tokens
        pProgram                'program'
        pConst                  'const'
        pProcedure              'procedure'
        pBegin                  'begin'
        pRepeat                 'repeat'
        pUntil                  'until'
        % end remove these old tokens
        pElsif                  'elsif'
        lastKeywordToken = pElsif

         

        % Scanner tokens -
        %   These are the tokens actually recognized by the Scanner itself.

        % Compound tokens - 
        %   These will be sent to the parser with a value or index.
        pIdentifier 
        firstCompoundInputToken = pIdentifier
        pInteger
        pStringLiteral
        lastCompoundInputToken = pStringLiteral

        % Non-compound tokens - 
        %   These tokens simply represent themselves.
        pNewLine
        pEndFile
        pPlus                   '+'
        pMinus                  '-'
        pStar                   '*'
        pAssignEquals           '='
        pNot                    '!'
        pDot                    '.'
        pComma                  ','
        pSemicolon              ';'
        pQuestion               '?'
        pDollar                 '$'
        pColon                  ':'
        pEquals                 '=='
        pNotEqual               '!='
        pLess                   '<'
        pLessEqual              '<='
        pGreaterEqual           '>='
        pGreater                '>'
        pLeftParen              '('
        pRightParen             ')'
        pLeftBracket            '['
        pRightBracket           ']'
        pHash                   '#'
        pDotDot                 '..'
        lastSyntaxToken = pDotDot;

Output :
        sIdentifier 
        firstSemanticToken = sIdentifier
        firstCompoundSemanticToken = sIdentifier
        sInteger
        sStringLiteral
        lastCompoundSemanticToken = sStringLiteral

        sProgram
        sParmBegin
        sParmEnd
        sConst
        sType
        sVar
        sProcedure
        sBegin
        sEnd
        sNegate
        sArray
        sFile
        sRange
        sCaseStmt
        sCaseEnd
        sLabelEnd
        sExpnEnd
        sNullStmt
        sAssignmentStmt
        sSubscript
        sCallStmt
        sFieldWidth
        sIfStmt
        sThen
        sElse
        sWhileStmt
        sRepeatStmt % remove this 
        sRepeatEnd % remove this
        sEq
        sNE
        sLT
        sLE
        sGT
        sGE
        sAdd
        sSubtract
        sMultiply
        sDivide
        sModulus
        sInfixOr
        sOr
        sInfixAnd
        sAnd
        sNot
        sNewLine
        % added semantic tokens
        sModule
        sDoStmt
        sBreakIf
        sSubstring
        sLength
        sIndex
        % end added semantic tokens
        sEndOfFile
        lastSemanticToken = sEndOfFile;


rules

Program :
        % Iffy doing his own editing of program to allow for testing of his code
        % Throw out iffys changes to Program rule on merge
        'using' .sProgram
        pIdentifier .sIdentifier
        {[
            | ',' :
                % if we see a comma, it should be proceeded by another identifier name and value
                % we also emit an sVar to make it understandable to semantic analyzer
                pIdentifier .sIdentifier

            | *:
                >
        ]}
        % emit sParmEnd token
        .sParmEnd

        % handle newline or semicolon end of statement
        [
            | pNewLine:
            | ';':
        ]

        % Block rule!
        % @Block;
        ;
        % 'program'  .sProgram
        % % program name
        % pIdentifier
        % % program parameters
        % '('
        % {
        %     pIdentifier  .sIdentifier
        %     [
        %         | ',':
        %         | *:
        %             >
        %     ]
        % }
        % ')'
        % .sParmEnd
        % ';'  @Block  '.';

Block :
        % Strictly speaking, standard Pascal requires that declarations
        % appear only in the order consts, types, vars, procedures.
        % We allow arbitrary intermixing of these instead to preserve
        % programmer sanity.
        {[
            | 'val': % changed from const to val
                .sConst
                @ConstantDefinitions
            | 'type':
                .sType
                @TypeDefinitions
            | 'var':
                .sVar
                @VariableDeclarations
            | 'procedure':
                .sProcedure
                % procedure name
                pIdentifier  .sIdentifier
                @ProcedureHeading
                @Block  ';'
            | pIdentifier:
                @AssignmentOrCallStmt
            | 'begin':
                @BeginStmt
            | 'if':
                @IfStmt
            | 'while':
                @WhileStmt
            | 'case':
                @CaseStmt
            | 'repeat':
                @RepeatStmt
            | pSemicolon:
                % semicolons are considered null declarations so we dont care for them
            |*:
               >
        ]}
        'begin'
        @BeginStmt;

ConstantDefinitions :
        % Accept one named constant definitions
        pIdentifier  .sIdentifier
        '=' @ConstantValue
        % choice rule to support the semicolon or newline as end of statement token
        % newline is first alternative to ensure proper recovery if that happens
        [
            | pNewLine:
            | ';':
        ];
        
        % only has support for one constant definition so other calls are removed

ConstantValue :
        [
            | pInteger:
                .sInteger
            | pIdentifier:
                .sIdentifier
            | '-':
                @UnsignedIntegerConstant
                .sNegate
            | '+':
                @UnsignedIntegerConstant
            | pStringLiteral:
                .sStringLiteral
        ];

UnsignedIntegerConstant :
        [
            | pIdentifier:
                .sIdentifier
            | pInteger:
                .sInteger
        ];

TypeDefinitions :
        % Accept one or more named type definitions.
        pIdentifier  .sIdentifier
        ':'  @TypeBody 
        % same newline or semicolon, explanation in Constant Definitions
        [
            | pNewLine:
            | ';':
        ];

TypeBody :
        [
            | 'array':
                .sArray
                '['  @SimpleType  ']'
                'of'  @SimpleType
            | 'file':
                .sFile
                'of'  @SimpleType
            | *:
                @SimpleType
        ];

SimpleType :
        % A simple type is a named type (possibly predefined)
        % or a subrange type specification
        [
            | pIdentifier:
                .sIdentifier
                [
                    | '..':
                        .sRange         %% this may be unnecessary
                        @OptionallySignedIntegerConstant
                    | *:
                ]
            | *:
                @OptionallySignedIntegerConstant
                '..'  .sRange
                @OptionallySignedIntegerConstant
        ];

OptionallySignedIntegerConstant :
        [
            | '-':
                @UnsignedIntegerConstant
                .sNegate
            | '+':
                @UnsignedIntegerConstant
            | *:
                @UnsignedIntegerConstant
        ];

VariableDeclarations :
        % Accept one or more variable declarations.
        pIdentifier .sIdentifier
        {[
            | ',' :
                % if we see a comma, it should be proceeded by another identifier name and value
                % we also emit an sVar to make it understandable to semantic analyzer
                .sVar pIdentifier .sIdentifier

            | *:
                >
        ]}

        % variable declarations should always end with a colon then the type
        ':' @TypeBody

        % handle newline or semicolon end of statement
        [
            | pNewLine:
            | ';':
        ];

ProcedureHeading :
        % Accept zero or more procedure formal parameter declarations.
        [
            | '(':
                {
                    % formal parameter identifier
                    [
                        | 'var':
                            pIdentifier  .sIdentifier
                            .sVar
                        | *:
                            pIdentifier  .sIdentifier
                    ]
                    ':'
                    % type identifier
                    pIdentifier  .sIdentifier
                    [
                        | ';':
                        | *:
                            >
                    ]
                }
                ')'
            | *:
        ]
        ';'
        .sParmEnd;

AssignmentOrCallStmt :
        [
            | pAssignEquals:
                .sAssignmentStmt
                .sIdentifier    % identifier accepted in the Statement rule
                @Expression
                .sExpnEnd
            | '[':
                .sAssignmentStmt
                .sIdentifier
                .sSubscript
                @Expression
                .sExpnEnd
                ']'  pAssignEquals
                @Expression
                .sExpnEnd
            | *:
                @CallStmt
        ];

CallStmt :
        .sCallStmt
        .sIdentifier    % procedure identifier accepted in the Statement rule
        % accept zero or more actual parameters
        [
            | '(':
                {
                    @Expression
                    .sExpnEnd
                    % allow a field width specification to occur in calls
                    % to the standard procedures write and writeln
                    [
                        | ':':
                            .sFieldWidth
                            @Expression
                            .sExpnEnd
                        | *:
                    ]
                    [
                        | ',':
                        | *:
                            >
                    ]
                }
                ')'
            | *:        % no actual parameters
        ]
        .sParmEnd;

BeginStmt :
        .sBegin
        {
            @Block
            [
                | ';':
                | 'end':
                    .sEnd
                    >
            ]
        };

IfStmt :
        .sIfStmt
        @Expression
        .sExpnEnd
        'then'  .sThen
        @Block
        [
            | 'else':
                .sElse
                @Block
            | *:
        ];

CaseStmt :
        .sCaseStmt
        @Expression
        .sExpnEnd
        'of'
        @CaseAlternative
        {[
            | ';':
                % since case alternatives cannot be null, allow
                % for the common situation of an extra semicolon
                % at the end of the list of case alternatives.
                [
                    | 'end':
                        >
                    | *:
                        @CaseAlternative
                ]
            | 'end':
                >
        ]}
        .sCaseEnd;

CaseAlternative :
        % A case alternative is a statement labelled by
        % one or more optionally signed integer constants

        {
            @OptionallySignedIntegerConstant
            [
                | ',':
                | *:
                    >
            ]
        }
        .sLabelEnd
        ':'  @Block;

WhileStmt :
        .sWhileStmt
        @Expression
        .sExpnEnd
        'do'
        @Block;

RepeatStmt :
        .sRepeatStmt
        {
            @Block
            [
                | ';':
                | 'until':
                    .sRepeatEnd
                    >
            ]
        }
        @Expression
        .sExpnEnd;

Expression :
        @SimpleExpression
        [
            | '=':
                @SimpleExpression  .sEq
            | pNotEqual:
                @SimpleExpression  .sNE
            | '<':
                @SimpleExpression  .sLT
            | '<=':
                @SimpleExpression  .sLE
            | '>':
                @SimpleExpression  .sGT
            | '>=':
                @SimpleExpression  .sGE
            | *:
        ];

SimpleExpression :
        [
            | '+':
                @Term
            | '-':
                @Term  .sNegate
            | *:
                @Term
        ]
        {[
            | '+':
                @Term  .sAdd
            | '-':
                @Term  .sSubtract
            | 'or':
                .sInfixOr  @Term  .sOr
            | *:
                >
        ]};

Term :
        @Subterm
        {[
            | '*':
                @Subterm  .sMultiply
            | 'div':
                @Subterm  .sDivide
            | 'mod':
                @Subterm  .sModulus
            | 'and':
                .sInfixAnd  @Subterm  .sAnd
            | '?':
                % String index operator
                @Expression
                .sIndex
            | *:
                >
        ]};

Subterm:
    [
        | '$':
            @Expression '..' @Expression
            .sSubstring

        | *:
            % call factor here
            @Factor
    ]
    ;

Factor :
        [
            | pIdentifier:
                .sIdentifier
                @IdentifierExtension
            | pInteger:
                .sInteger
            | '(':
                @Expression  ')'
            | pNot:
                @Factor
                .sNot
            | pStringLiteral:
                .sStringLiteral
            | 'file':
                .sFile '(' @Expression ')'
                .sExpnEnd
            | '#':
                % String length operand, it is expecting an expression hence we call the expression rule
                @Expression
                .sLength
        ];

IdentifierExtension :
        % Handle subscripts and function actual parameter lists
        [
            | '[':
                .sSubscript
                @Expression  ']'
                .sExpnEnd
            | '(':
                .sParmBegin
                @Expression  ')'
                .sExpnEnd
                .sParmEnd
            | *:
        ];

end
